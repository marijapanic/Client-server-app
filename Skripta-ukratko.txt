TransferKlasa

namespace Domen
{
    // sve moraju biti seriajabilne
    // da bi mogle da se posalju kroz tok

    public enum Operacije { Kraj  = 1};
    [Serializable]
    public class TransferKlasa
    {
        // prikazi, izracunaj itd...
        // sta zelimo da uradimo od operacija
        public Operacije operacija;

        // prenositi podatke od klijenta do servera
        public object transferObjekat;
        // rezultat sta vrati server
        public object rezultat;
    }
}
--------------------------------------------------------------------
Komunikacija
using Domen;
using System.Net;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
namespace Klijent
{
    public class Komunikacija
    {
        TcpClient klijent; // 
        NetworkStream tok; // tokomkoga ce komunicirati
        BinaryFormatter formater;   // pomocu koga ce komunicirati

        public bool poveziSe()
        {
            try
            {

                klijent = new TcpClient("127.0.0.1", 20000);
                tok = klijent.GetStream();
                formater = new BinaryFormatter();
                return true;
            }
            catch (Exception)
            {

                return false;
            }
        }

        public void kraj()
        {
            TransferKlasa transfer = new TransferKlasa();
            transfer.operacija = Operacije.Kraj;
            // slanje podataka
            formater.Serialize(tok,transfer);
        }
        /* primer metode
        public Korisnik login(Korisnik k)
        {
            TransferKlasa transfer = new TransferKlasa();
            transfer.Operacija = Operacije.Login;
            transfer.TransferObjekat = k;
            formater.Serialize(tok, transfer);

            transfer = formater.Deserialize(tok) as TransferKlasa;
            return transfer.Rezultat as Korisnik;
        }
        */
    }
}

---------------------------------------------------------
Klijent forma

namespace Klijent
{
    public partial class FormaKlijent : Form
    {
        Komunikacija k;
        public FormaKlijent()
        {
            InitializeComponent();
        }

        private void FormaKlijent_Load(object sender, EventArgs e)
        {
            k = new Komunikacija();
            if (k.poveziSe())
            {
                this.Text = "Povezan";
            }
        }
    }
}
------------------------------------------------------------
Broker

using Domen;
using System.Data;
using System.Data.SqlClient;
namespace Server
{
    public class Broker
    {
        SqlConnection konekcija;
        SqlCommand komanda;
        SqlTransaction transakcija;

        void konektujSe()
        {
            konekcija = new SqlConnection(@"");
            komanda = konekcija.CreateCommand();
        }

        Broker()
        {
            konektujSe();
        }

        static Broker instanca;
        public static Broker dajSesiju()
        {
            if (instanca == null)
                instanca = new Broker();
            return instanca;
        }
    }
}
-----------------------------------------------------------
Nit

using Domen;
using System.Net;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
namespace Server
{
    class Nit
    {
        private NetworkStream tok;
        BinaryFormatter formater;
        public Nit(NetworkStream tok)
        {
            this.tok = tok;
            formater = new BinaryFormatter();

            ThreadStart ts = obradi;
            new Thread(ts).Start();
        }

        void obradi()
        {
            try
            {
                int operacija = 0;
                while (operacija != (int)Operacije.Kraj)
                {
                    // uzima iz toka
                    // a to je transfer klasa
                    TransferKlasa transfer = formater.Deserialize(tok) as TransferKlasa;

                    switch (transfer.operacija)
                    {
                            // primer drugih
                            //case Operacije.Login:
                            //transfer.Rezultat = Broker.dajSesiju().login(transfer.TransferObjekat as Korisnik);
                            //formater.Serialize(tok, transfer);
                            //break;
                        case Operacije.Kraj: operacija = 1;
                            break;
                        default: break;
                    }
                }
            }
            catch (Exception)
            {

                
            }
        }
    }
}

-------------------------------------------------
Server

using Domen;
using System.Net;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;

namespace Server
{
    public class Server
    {
        Socket soket;
        public bool pokreniServer()
        {
            try
            {
                // new IPEndPoint(IPAddress.Parse("127.0.0.1"),18000)
                soket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                IPEndPoint ep = new IPEndPoint(IPAddress.Any,20000);
                soket.Bind(ep);
                ThreadStart ts = osluskaj;
                new Thread(ts).Start();
                
                return true;
            }
            catch (Exception)
            {

                return false;
            }
        }

        public bool zaustaviServer()
        {
            try
            {
                soket.Close();
                return true;
            }
            catch (Exception)
            {

                return false ;
            }
        }

        void osluskaj()
        {
            try
            {
                while (true)
                {
                    soket.Listen(8);
                    Socket klijent = soket.Accept();
                    NetworkStream tok = new NetworkStream(klijent);
                    new Nit(tok);
                }
            }
            catch (Exception)
            {

                
            }
        }
    }
}
----------------------------------------------------------------
ServerForma

namespace Server
{
    public partial class FormaServer : Form
    {
        Server s;
        Timer t;
        public FormaServer()
        {
            InitializeComponent();
        }

        private void FormaServer_Load(object sender, EventArgs e)
        {
            s = new Server();
            if (s.pokreniServer())
            {
                this.Text = "Server je pokrenut";
                
                t = new Timer();
                t.Interval = 2000;
                t.Tick += osvezi;
                t.Start();
            }
        }
        
        private void osvezi(object sender, EventArgs e)
        {
            dataGridView1.DataSource = Broker.dajSesiju().vratiSveReci();
            dataGridView1.Columns[0].Width = 100;
        }
    }
}

