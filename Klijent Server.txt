I Domen->Class library(Biblioteka)
	Ima transfer klasu
	Sve klase moraju da budu [Serializable] da bi mogle da se posalju kroy tok
II Klijent->Windows Form(Referenca na Domen)
	 Forma: Klijent
	 Klasa: Komunikacija
III Server->Windows Form(StartUpp project,Referenca na Domen)
	Forma: FormaServer
	Klasa: Server
	Klasa: NitKlijenta
	Klasa: Broker

I Transfer klasa:
	public enum Operacije{Kraj=1} - ovde se nalaze sve operacije
	public Operacije Operacija; - sta zelimo da uradimo
	public Object TransferObjekat; - sta saljemo
	public Object Rezultat; - sta primamo

II Komunikacija
	using Domen;
	using System.Net;
	using System.Net.Sockets;
	using System.Runtime.Serialization.Formatters.Binary;
	using System.Threading;

III Server, Nit klijenta:
	using Domen;
	using System.Net;
	using System.Net.Sockets;
	using System.Runtime.Serialization.Formatters.Binary;
	using System.Threading;
	
	Socket socket;
	public bool pokreniServer()
	{
		try
		{
			soket=new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); (interne mreze,top,protokol za komunikaciju)
			IPEndPoint ep=new IPEndPoint(IPAddress.Any, 20000); (ip adresa,port od 0 do 2 na 6-1) ne korisnimo portove do 5000
			soket.Bind(ep); - pokreni mi soket da slusa na bilo kojoj adresi na tom portu

			ThreadStart ts = osluskuj;
			new Thread(ts).Start(); - zbog beskonacne petlje

			return true;
		}
		catch(Exception)
		{
			return false;
		}
	}
	public bool zaustaviServer() - ovo koristimo ako je naglaseno u zadatku
	{
		try
		{
			soket.Close();
			return true;
		}
		catch(Exception)
		{
			return false;
		}
	}

	void osluskuj() - sluzi da osluskuje klijente
	{
		try
		{
			soket.Listen(broj); - maksimalni broj klijenata koji mogu da cekaju opsluzivanje,mera zastite
			Socket klijent = soket.Accept(); - prihvati soket za klijenta
			NetworkStream tok = new NetworkStream(klijent) - napravi tok za tog klijenta
			new NitKlijenta(tok); - napravi nit
		}
		catch
		{
		}
	}

III FormaServer
	Server s;

	s=new Server();
	if(s.pokreniServer())
	{
		this.Text = "Server je pokrenut";
	}

III NitKlijenta
	BinaryFormatter formater;

	formater = new BinaryFormatter();
	
	ThreadStart ts = obradi;
	new Thread(ts).Start(); - svaki klijent dobija svoju nit

	void obradi() - obradjuje zahteve klijenata
	{
		try
		{
			int operacija = 0;
			while(operacija != (int)Operacije.Kraj)
			{
				TransferKlasa transfer = formater.Deserialize(tok) as TransferKlasa; - prvo prima transfer od klikenta
				switch(transfer.Operacija) - zanima ga koja je operacija u pianju
				{
					case Operacije.Kraj:operacija=1;
						break;
					default:
						break;
				}
			}
		}
		catch	
		{
		}
	}

II Komunikacija
	TcpClient klijent;
	NetworkStream tok;
	BinaryFormatter formater;

	povezi se na server:
	klijent = new TcpClient("localhost",20000); - ja sam novi klijent
	tok=klijent.GetStream(); - daj i meni da zapamtim tok sto si mi dodelio
	formater = new BinaryFormatter();
	return true;

	kraj:
	TransferKlasa transfer = new TransferKlasa();
	transfer.Operacija=Operacije.Kraj; - operacija koju zelim da uradim je kraj
	formater.Serialize(tok,transfer) - saljem ti u tok transfer klasu

II Klijent
	Komunikacija k;
		
	k=new Komunikacija();
	if(k.poveziSeNaServer()) - ukoliko se klijent povezao na server
	{
		this.Text="Povezan";
	}

*Da vidimo da li funkcionise:
	Idemo na run i otvori Server je pokrenut!
	Desni klik na Klijenta->Debug->Start new instance i otvori Povezan(tako za sve klijente)

*Da budu oba StartUp->Set StartUpp projects->Multiple startup projects i stavimo Klijent i Server na Start
	i onda kad pritisnemo run izadju oba prozorcica

*Kada je Server ConsoleAplication
	dodamo novi projekat i izaberemo ConsoleAp
	prevucemo klase Server, NitKlijenta i Broker 
	i u namespace stavimo ServerKonzola
	i stavimo refencu na Domen
	izbrisemo Server formu projekat
	u klasu program: Server s=new ServerKonzola.Server();
			 if(s.pokreniServer()) Console.WriteLine("Pokrenut!");
	stavimo opet multiple startup
